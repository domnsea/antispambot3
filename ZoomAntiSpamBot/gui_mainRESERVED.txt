\; ========================================================================
; File: gui_main.ahk  (AutoHotkey v1.1)
; Compact Dark GUI â€¢ Chat duplicate detection â€¢ Disableâ†’Enable chat
; Image-assisted delete â€¢ 5-cam scoring â€¢ Forensic logging
; Helpers use Z_ prefix. Globals explicit. Starts OFF.
; ========================================================================

#NoEnv
#Warn
#SingleInstance Force
SendMode Input
SetWorkingDir %A_ScriptDir%
SetBatchLines, -1
CoordMode, Pixel, Screen
CoordMode, Mouse, Screen
CoordMode, ToolTip, Screen
SetTitleMatchMode, 2

; ----------------------------- Paths & Assets ---------------------------
baseDir     := A_ScriptDir
assetsDir   := baseDir . "\assets"
scriptsDir  := baseDir . "\scripts"
dataDir     := baseDir . "\data"
logsDir     := baseDir . "\logs"

IfNotExist, %dataDir%
    FileCreateDir, %dataDir%
IfNotExist, %logsDir%
    FileCreateDir, %logsDir%

Z_Asset(name, ext:="png") {
    global assetsDir
    p1 := assetsDir . "\" . name
    p2 := p1 . "." . ext
    if FileExist(p1)
        return p1
    if FileExist(p2)
        return p2
    return ""
}
Z_DefFile(pathNoExt, ext1:=".txt", ext2:=".log") {
    p := pathNoExt
    if FileExist(p)
        return p
    if FileExist(p . ext1)
        return p . ext1
    if FileExist(p . ext2)
        return p . ext2
    return p
}

file_banned   := Z_DefFile(dataDir . "\banned_ids")
file_flagged  := Z_DefFile(dataDir . "\flagged_ids")
file_p_hist   := Z_DefFile(dataDir . "\participant_history")
file_p_log    := Z_DefFile(dataDir . "\participant_log")
file_spam     := Z_DefFile(dataDir . "\spam_log")
file_err      := Z_DefFile(dataDir . "\error_log")
file_recent   := Z_DefFile(dataDir . "\recent_entries")
file_chatlog  := Z_DefFile(logsDir . "\chatlog", ".log", ".txt")
file_feed     := Z_DefFile(dataDir . "\chat_feed")  ; ts|user|message
file_geo      := Z_DefFile(dataDir . "\geo_map")    ; id|Region OR name|Region

img_dup       := Z_Asset("duplicate_indicator")
img_del_btn   := Z_Asset("chat_delete_button")
img_del_btn2  := Z_Asset("delete_button")
img_tile      := Z_Asset("tile_template")
img_waitroom  := Z_Asset("waitroom_button")
img_logo      := Z_Asset("logo")

script_disable := scriptsDir . "\DisableMeetingChat.ahk"
script_enable  := scriptsDir . "\EnableMeetingChat.ahk"

; ------------------------------- State ----------------------------------
BotEnabled := 0            ; start OFF
Tolerance := "Med"         ; Low=3 / Med=4 / High=5

GenCooldownMs := 15000
EmojiCooldownMs := 5000
AggressiveMs := 10000
AggressiveUntil := 0
lastZapTick := 0
lastEmojiZapTick := 0
EmojiSignature := "ðŸ˜ˆðŸ”¥ðŸ˜ˆðŸ”¥ðŸ˜ˆðŸ”¥"  ; detection only

dupBuckets := {}               ; userKey -> msgKey -> [tick]
RecentSpam := []               ; rows: [time,user,msg]
lastProcessedIdx := 0
g_feedLastSize := 0
lastSizeChat := 0
lastFeedTick := 0

TARGET_HEX := 0x222222
maleShort := "|ben|sam|tom|joe|max|leo|ken|jon|jay|ray|tim|rob|bob|dan|eli|ian|gus|kay|raj|ali|"

cams := []
cams.Push({name:"cam1", x:1398, y:761})
cams.Push({name:"cam2", x:1247, y:816})
cams.Push({name:"cam3", x:1825, y:280})
cams.Push({name:"cam4", x:673 , y:809})
cams.Push({name:"cam5", x:364 , y:813})

LastCamScores := []            ; "Name (ID7) - Region - Score"
UseOCR := 0                    ; only if scripts\OCR.ahk provides OCR_GetText

banned := {}, flagged := {}
Z_EnsureHeader(file_p_log, "ID|Name|Region|Score|Timestamp")
Z_EnsureHeader(file_spam,  "Timestamp|Reason|User|ParticipantID|Message")
Z_EnsureHeader(file_chatlog,"Timestamp|Kind|Reason|User|ParticipantID|Message")
Z_LoadSet(file_banned, banned)
Z_LoadSet(file_flagged, flagged)

; -------------------------------- GUI -----------------------------------
Gui, New, +Resize +MinSize560x360, Zoom Anti-Spam Bot
Gui, Color, 2A2A2A, 2A2A2A
Gui, Font, s9 cFFFFFF, Segoe UI
Gui, Margin, 10, 8

Gui, Add, Text,  vStatusText x10  y10 w420, Status: Monitoring inactive - Tolerance: Medium
if (img_logo != "")
    Gui, Add, Picture, x480 y6 w48 h48 vTopLogo, %img_logo%
Gui, Add, Text,  vFeedText  x10  y28 w260, Chat feed: Idle
Gui, Add, Text,  vChatWinText x280 y28 w260, Chat window: Missing

optCB := BotEnabled ? "Checked" : ""
Gui, Add, GroupBox, x10 y52 w540 h78, Controls
Gui, Add, Checkbox, x20 y70 vBotEnabled gZ_OnBotToggle %optCB%, Anti-Spam Bot: ON/OFF
Gui, Add, Button,   x20 y96  w180 h26 gZ_DeleteSpamQuick, Delete Spam Quick
Gui, Add, Button,   x210 y96 w230 h26 gZ_QuickChatToggle, Quick Chat Toggle (Disable then Enable)
Gui, Add, Button,   x446 y96 w94  h26 gZ_Exit, Exit

Gui, Add, GroupBox, x10 y136 w540 h52, Spam Tolerance
Gui, Add, Radio,    x24 y156 vTolLow  gZ_TolChange, Low (3/7)
Gui, Add, Radio,    x140 y156 vTolMed  gZ_TolChange Checked, Medium (4/7)
Gui, Add, Radio,    x280 y156 vTolHigh gZ_TolChange, High (5/7)

Gui, Add, GroupBox, x10 y192 w540 h148, Recent Camera Scores
Gui, Add, ListBox,  x20 y212 w520 h116 vLastCamsLB, (waiting...)

Gui, Show, w560 h360
SetTimer, Z_MainLoop, 750
return

; =============================== LABELS =================================
Z_Exit:
    ExitApp
return

Z_OnBotToggle:
    Gui, Submit, NoHide
    Gosub, Z_UpdateStatus
return

Z_TolChange:
    Gui, Submit, NoHide
    if (TolLow)
        Tolerance := "Low"
    else if (TolMed)
        Tolerance := "Med"
    else
        Tolerance := "High"
    Gosub, Z_UpdateStatus
return

Z_QuickChatToggle:
    if (Z_ChatDisableThenEnable())
        Z_StatusFlash("Manual chat toggle executed")
return

Z_DeleteSpamQuick:
    Z_DeleteSpamQuickLoop()
return

GuiClose:
GuiEscape:
    Gosub, Z_Exit
return

Z_UpdateStatus:
    global BotEnabled, Tolerance
    statusTxt := "Status: Monitoring " . (BotEnabled ? "active" : "inactive")
               . " - Tolerance: " . (Tolerance="Low"?"Low":Tolerance="Med"?"Medium":"High")
    GuiControl,, StatusText, %statusTxt%
return

; ============================== MAIN LOOP ===============================
Z_MainLoop:
    global BotEnabled
    if (!BotEnabled)
        return
    Z_FocusChat()
    Z_PopulateRecentSpamFromFeed()
    Z_DetectAndMitigateChatSpam_FromLog()
    Z_ScanFiveCamsAndScore()
    Z_UpdateFeedStatus()
    Z_UpdateChatWinStatus()
return

; ----------------- Activate chat & jump to latest message ----------------
Z_FocusChat() {
    Send, !h
    Sleep, 200
    hwnd := Z_FindChatWin()
    if !hwnd
        return 0
    WinActivate, ahk_id %hwnd%
    WinWaitActive, ahk_id %hwnd%, , 500
    Send, ^{End}
    Sleep, 80
    return hwnd
}

; =================== CHAT DUPLICATE (FROM LOG) + DELETE =================
Z_PopulateRecentSpamFromFeed() {
    global file_feed, file_chatlog, g_feedLastSize, RecentSpam, lastSizeChat, lastFeedTick
    if FileExist(file_feed) {
        FileGetSize, cur, %file_feed%
        if (cur > g_feedLastSize) {
            f := FileOpen(file_feed, "r")
            if (f) {
                f.Seek(g_feedLastSize, 0)
                Loop {
                    line := f.ReadLine()
                    if (line = "")
                        break
                    parts := StrSplit(Trim(line), "|")
                    ts := parts.MaxIndex()>=1 ? parts[1] : ""
                    user := parts.MaxIndex()>=2 ? parts[2] : ""
                    msg  := parts.MaxIndex()>=3 ? parts[3] : ""
                    RecentSpam.Push([ts, user, msg])
                    lastFeedTick := A_TickCount
                }
                g_feedLastSize := f.Pos
                f.Close()
            }
        }
        return
    }
    if FileExist(file_chatlog) {
        FileGetSize, cs, %file_chatlog%
        if (cs > lastSizeChat) {
            f2 := FileOpen(file_chatlog, "r")
            if (f2) {
                f2.Seek(lastSizeChat, 0)
                Loop {
                    l := f2.ReadLine()
                    if (l = "")
                        break
                    if InStr(l, "|MSG|") {
                        p := StrSplit(Trim(l), "|")
                        if (p.MaxIndex() >= 4) {
                            ts := p[1], user := p[3], msg := p[4]
                            RecentSpam.Push([ts, user, msg])
                            lastFeedTick := A_TickCount
                        }
                    }
                }
                lastSizeChat := f2.Pos
                f2.Close()
            }
        }
    }
}

Z_UpdateFeedStatus() {
    global lastFeedTick
    now := A_TickCount
    state := (now - lastFeedTick <= 5000) ? "Active" : "Idle"
    GuiControl,, FeedText, % "Chat feed: " . state
}

Z_UpdateChatWinStatus() {
    hwnd := Z_FindChatWin()
    GuiControl,, ChatWinText, % "Chat window: " . (hwnd ? "Found" : "Missing")
}

Z_DetectAndMitigateChatSpam_FromLog() {
    global RecentSpam, lastProcessedIdx
    global EmojiSignature, EmojiCooldownMs, lastEmojiZapTick
    global GenCooldownMs, lastZapTick, AggressiveMs, AggressiveUntil
    global dupBuckets
    if !IsObject(RecentSpam)
        return
    total := RecentSpam.Length()
    if (total <= lastProcessedIdx)
        return
    now := A_TickCount
    winMs := (now < AggressiveUntil) ? 3000 : 8000
    idx := lastProcessedIdx + 1
    while (idx <= total) {
        Z_RS(RecentSpam[idx], t, u, m)
        if (m != "" && InStr(m, EmojiSignature)) {
            if (now - lastEmojiZapTick >= EmojiCooldownMs) {
                if (Z_ZapChat("emoji", u, m)) {
                    lastEmojiZapTick := now
                    lastZapTick := now
                    AggressiveUntil := now + AggressiveMs
                    Z_DeleteSpamQuickLoop()
                }
            }
            idx++
            continue
        }
        if (now - lastZapTick >= GenCooldownMs) {
            uKey := Z_ToKey(u)
            mKey := Z_MsgKey(m)
            if !dupBuckets.HasKey(uKey)
                dupBuckets[uKey] := {}
            if !dupBuckets[uKey].HasKey(mKey)
                dupBuckets[uKey][mKey] := []
            Z_PruneOld(dupBuckets[uKey][mKey], winMs, now)
            dupBuckets[uKey][mKey].Push(now)
            if (dupBuckets[uKey][mKey].Length() >= 3) {
                if (Z_ZapChat("duplicate", u, m)) {
                    lastZapTick := now
                    lastEmojiZapTick := now
                    Z_DeleteSpamQuickLoop()
                }
                dupBuckets[uKey][mKey] := []
            }
        }
        idx++
    }
    lastProcessedIdx := total
}

Z_DeleteSpamQuickLoop() {
    global img_dup, img_del_btn, img_del_btn2, TARGET_HEX
    hwnd := Z_FindChatWin()
    if (!hwnd)
        return
    WinGetPos, cx, cy, cw, ch, ahk_id %hwnd%
    Loop, 5 {
        if !Z_ImageFind(img_dup, cx, cy, cx+cw, cy+ch, fx, fy)
            break
        PixelGetColor, c, %fx%, %fy%, RGB
        if (c != TARGET_HEX)
            break
        MouseClick, Right, % (fx+30), % (fy+18), 1, 0
        Sleep, 120
        dx := 0
        dy := 0
        if (Z_ImageFind(img_del_btn, 0,0,A_ScreenWidth, A_ScreenHeight, dx, dy)
         || Z_ImageFind(img_del_btn2, 0,0,A_ScreenWidth, A_ScreenHeight, dx, dy)) {
            Click, %dx%, %dy%
        } else {
            Send, {Enter}
        }
        Sleep, 160
    }
}

; ============================ ZAP (Disableâ†’Enable) ======================
Z_ZapChat(reason, user, message) {
    global file_banned, banned
    if (Z_ChatDisableThenEnable()) {
        Z_Flash("Mitigation: " . reason)
        pid := Z_NameToId(user)
        Z_LogSpam(reason, user, pid, message)
        if (pid != "")
            Z_AddToSetFile(pid, file_banned, banned)
        return 1
    }
    return 0
}

Z_ChatDisableThenEnable() {
    global script_disable, script_enable
    if FileExist(script_disable) && FileExist(script_enable) {
        RunWait, "%A_AhkPath%" "%script_disable%", , UseErrorLevel
        if (ErrorLevel = "ERROR")
            return 0
        RunWait, "%A_AhkPath%" "%script_enable%", , UseErrorLevel
        if (ErrorLevel = "ERROR")
            return 0
        return 1
    }
    return Z_ClickChatMenuAndPick(-108,126,3) && Z_ClickChatMenuAndPick(-108,126,4)
}

Z_ClickChatMenuAndPick(cfgX, cfgY, downSteps) {
    hwnd := Z_FindChatWin()
    if (!hwnd)
        return 0
    WinActivate, ahk_id %hwnd%
    WinWaitActive, ahk_id %hwnd%, , 800
    WinGetPos, wx, wy, ww, wh, ahk_id %hwnd%
    x := (cfgX < 0) ? (wx + ww + cfgX) : (wx + cfgX)
    y := (cfgY < 0) ? (wy + wh + cfgY) : (wy + cfgY)
    Click, %x%, %y%, 1
    Sleep, 150
    Loop, % (downSteps+0) {
        Send, {Down}
        Sleep, 30
    }
    Send, {Enter}
    Sleep, 80
    return 1
}

; ---- Single definition only ----
Z_FindChatWin() {
    if WinExist("Meeting Chat ahk_exe Zoom.exe")
        return WinExist()
    if WinExist("ahk_exe Zoom.exe")
        return WinExist()
    return 0
}

; ========================== CAMERA SCORING + LOGGING ====================
Z_ScanFiveCamsAndScore() {
    global cams, TARGET_HEX, Tolerance, banned, flagged, file_flagged
    th := (Tolerance="Low") ? 3 : (Tolerance="Med") ? 4 : 5
    for idx, cam in cams {
        PixelGetColor, c, % cam.x, % cam.y, RGB
        info := Z_GatherCamInfo(cam.x, cam.y)
        score := Z_ComputeSpamScore(info)
        Z_LogParticipant(info.id, info.name, info.region, score)
        Z_PushLastCam(info.name, info.id, info.region, score)
        if (c = TARGET_HEX) {
            MouseClick, Right, % cam.x, % cam.y, 1, 0
            Sleep, 100
            if (info.id != "" && banned.HasKey(info.id)) {
                Z_WaitRoomAt(cam.x, cam.y, "banned")
                continue
            }
            if (score >= th) {
                Z_AddToSetFile(info.id, file_flagged, flagged)
                Z_WaitRoomAt(cam.x, cam.y, "score=" . score)
            }
        }
    }
}

Z_PushLastCam(name, id, region, score) {
    global LastCamScores
    showName := (Trim(name)="" ? "(unknown)" : Z_Trunc(name, 20))
    showId7  := Z_Trunc(id, 7)
    reg := (Trim(region)="" ? "Unknown" : Z_Trunc(region, 18))
    entry := showName . " (" . (showId7=""?"no-id":showId7) . ") - " . reg . " - " . score
    LastCamScores.Push(entry)
    while (LastCamScores.Length() > 5)
        LastCamScores.RemoveAt(1)
    Z_RefreshLastCamsLB()
}

Z_RefreshLastCamsLB() {
    global LastCamScores
    items := ""
    for i, e in LastCamScores
        items .= (i=1 ? "" : "|") . e
    if (items = "")
        items := "(waiting...)"
    GuiControl,, LastCamsLB, %items%
}

Z_GatherCamInfo(x, y) {
    global img_tile, UseOCR
    obj := {}
    obj.name := Z_OCRNameAt(x, y)
    obj.id := Z_NameToId(obj.name)
    obj.region := Z_GeoLookup(obj.name, obj.id)
    obj.hasTile := Z_ImageAround(img_tile, x, y, 120, 90)
    obj.allLower := Z_IsLower(obj.name)
    obj.hasZero := InStr(obj.name, "0") ? 1 : 0
    obj.shortMale := Z_IsShortMale(obj.name)
    return obj
}

Z_ComputeSpamScore(info) {
    s := 0
    if (info.hasTile)
        s += 3
    if (info.allLower)
        s += 1
    if (info.hasZero)
        s += 1
    if (info.shortMale)
        s += 1
    return s
}

; ----------------- FIXED: returns in function (no commas) ----------------
Z_GeoLookup(name, id) {
    global file_geo
    if !FileExist(file_geo)
        return "Unknown"
    FileRead, data, %file_geo%
    tmp := Trim(id)
    StringLower, idL, tmp
    tmp2 := Trim(name)
    StringLower, nmL, tmp2
    Loop, Parse, data, `n, `r
    {
        ln := Trim(A_LoopField)
        if (ln = "")
            continue
        p := StrSplit(ln, "|")
        key := Trim(p[1])
        reg := (p.MaxIndex()>=2) ? Trim(p[2]) : ""
        if (key = "") || (reg = "")
            continue
        ktmp := key
        StringLower, keyL, ktmp
        if (idL != "" && keyL = idL)
            return reg
        if (nmL != "" && keyL = nmL)
            return reg
    }
    return "Unknown"
}

Z_WaitRoomAt(x, y, why) {
    global img_waitroom
    Z_StatusFlash("Wait room: " . why)
    if (Z_ImageFind(img_waitroom, 0,0,A_ScreenWidth, A_ScreenHeight, wx, wy))
        Click, %wx%, %wy%
    else
        Send, {Esc}
    Sleep, 150
}

; ============================== LOGGING =================================
Z_LogParticipant(id, name, region, score) {
    global file_p_log, file_p_hist
    id := Z_San(id)
    name := Z_San(name)
    region := Z_San(region)
    score := score+0
    ts := Z_TS()
    FileAppend, % id "|" name "|" region "|" score "|" ts "`r`n", %file_p_log%
    FileAppend, % ts "|CHECK|" id "|" name "|" region "|" score "`r`n", %file_p_hist%
}

Z_LogSpam(reason, user, pid, msg) {
    global file_spam, file_chatlog
    ts := Z_TS()
    reason := Z_San(reason)
    user := Z_San(user)
    pid := Z_San(pid)
    msg := Z_San(msg)
    FileAppend, % ts "|" reason "|" user "|" pid "|" msg "`r`n", %file_spam%
    FileAppend, % ts "|ZAP|" reason "|" user "|" pid "|" msg "`r`n", %file_chatlog%
}

Z_LogErr(text) {
    global file_err
    ts := Z_TS()
    FileAppend, % ts "|ERR|" text "`r`n", %file_err%
}

; ============================= HELPERS ==================================
Z_EnsureHeader(path, header) {
    FileGetSize, sz, %path%
    if (ErrorLevel || sz = 0)
        FileAppend, %header% "`r`n", %path%
}

Z_LoadSet(path, ByRef map) {
    if !FileExist(path)
        return
    FileRead, data, %path%
    Loop, Parse, data, `n, `r
    {
        v := Trim(A_LoopField)
        if (v != "")
            map[v] := 1
    }
}

Z_AddToSetFile(val, path, ByRef map) {
    val := Trim("" . val)
    if (val = "")
        return
    if (!map.HasKey(val)) {
        map[val] := 1
        FileAppend, % val "`r`n", %path%
    }
}

Z_ImageFind(img, x1,y1,x2,y2, ByRef outX, ByRef outY) {
    if (img = "" || !FileExist(img))
        return 0
    ImageSearch, fx, fy, %x1%, %y1%, %x2%, %y2%, %img%
    if (ErrorLevel = 0) {
        outX := fx
        outY := fy
        return 1
    }
    return 0
}

Z_ImageAround(img, cx, cy, w:=150, h:=120) {
    _x := 0
    _y := 0
    return Z_ImageFind(img, cx-w, cy-h, cx+w, cy+h, _x, _y)
}

Z_PruneOld(ByRef arr, windowMs, now) {
    i := 1
    while (i <= arr.Length()) {
        if (now - arr[i] > windowMs)
            arr.RemoveAt(i)
        else
            i++
    }
}

Z_TS() {
    FormatTime, ts,, yyyy-MM-dd HH:mm:ss
    return ts
}

Z_San(s) {
    s := "" . s
    StringReplace, s, s, `r, , All
    StringReplace, s, s, `n, , All
    StringReplace, s, s, |, /, All
    return Trim(s)
}

Z_ToKey(s) {
    s := Trim("" . s)
    StringLower, k, s
    return k
}

Z_MsgKey(m) {
    m := Trim("" . m)
    StringLower, m2, m
    return m2
}

Z_Trunc(s, n) {
    s := "" . s
    return (StrLen(s) <= n) ? s : (SubStr(s,1,n) . "â€¦")
}

Z_IsLower(s) {
    s := "" . s
    if (s = "")
        return 0
    StringLower, l, s
    return l = s
}

Z_IsShortMale(name) {
    global maleShort
    n := Z_ToKey(name)
    n7 := SubStr(n, 1, 7)
    if (InStr(maleShort, "|" . n . "|"))
        return 1
    if (StrLen(RegExReplace(n7, "[^a-z]")) <= 4 && StrLen(n7) <= 4)
        return 1
    return 0
}

Z_RS(item, ByRef t, ByRef u, ByRef m) {
    t := ""
    u := ""
    m := ""
    if IsObject(item) {
        if (item.HasKey(1) {
            t := item[1]
            u := item[2]
            m := item[3]
        } else {
            t := item.time ? item.time : ""
            u := item.user ? item.user : ""
            m := item.message ? item.message : (item.text ? item.text : "")
        }
    } else {
        m := item
    }
}

Z_NameToId(name) {
    global dataDir
    mapPath := dataDir . "\name_id_map"
    if !FileExist(mapPath) && FileExist(mapPath . ".txt")
        mapPath := mapPath . ".txt"
    if !FileExist(mapPath)
        return ""
    tmp := Trim("" . name)
    StringLower, n, tmp
    FileRead, data, %mapPath%
    Loop, Parse, data, `n, `r
    {
        L := Trim(A_LoopField)
        if (L="") || !InStr(L, "|")
            continue
        parts := StrSplit(L, "|")
        id := Trim(parts[1])
        nm := parts.MaxIndex()>=2 ? Trim(parts[2]) : ""
        nmTmp := nm
        StringLower, nmL, nmTmp
        if (nmL = n)
            return id
    }
    return ""
}

Z_OCRNameAt(x, y) {
    global UseOCR
    if (UseOCR && IsFunc("OCR_GetText")) {
        return Trim(Func("OCR_GetText").Call(x-100, y+20, 200, 40))
    }
    return ""
}

Z_StatusReset:
    Gosub, Z_UpdateStatus
return
